#include <iostream>
#include <fstream>
//Algoritmo Quicksort
//usar recursividad, y dividir
//escoger un pivot con una media
// ordenar usando relaciones de pivot con primero y final
//si todo es falso, numeros cambian de posicion
//si un numero es falso recorre
//si los dos son verdaderos se recorren los dos


using namespace std;
//prototipos
int mitad(int a[], int pinicial, int pfinal);

void ordenar(int a[], int pinicial, int pfinal);

void almacenar(int a[],int b[], int n);

//funcion principal

int main() {

int a[10] = {123,-6,13,-33,-98,333,23,-5,0,-100};
int b[10]= {1,4,5,6,8,7,19,20,16,18};

//copiar arreglo
for (int i=0; i<10; i++){

  b[i]=a[i];

}


cout<<"Este es el arreglo ordenado"<<endl;
ordenar(b,0,9);

for (int i=0; i<10; i++){

  cout<<"["<<b[i]<<"]"<<" ";

}

almacenar(a,b, 10);




  return 0;
}
//funcion para tener el pivot
int mitad(int a[], int pinicial, int pfinal){

return a[(pinicial+ pfinal)/2];


}

//funcion para realizar el ordenamiento
//puntero izquierdo, puntero derecho y el pivot
void  ordenar(int a[], int pinicial, int pfinal) {

int i=pinicial;
int j=pfinal;
int temp;
int piv= mitad(a, pinicial,pfinal); //aqui llama a la funcion mitad

do {
//movimiento de los punteros
  while(a[i]<piv)
  {
    i++;
  }
while(a[j]>piv)
  {
    j--;
  }
//intercambio de posiciones
    if (i<=j)
    {
      temp=a[i];
      a[i]=a[j];
      a[j]=temp;
      i++;
      j--;

    }

} while(i<=j);

if (pinicial<=j) {

ordenar(a,  pinicial,  j);

}

if (i<pfinal) {

ordenar(a, i, pfinal);

}


}

//almacenar en un archivo

void almacenar(int a[], int b[], int n){

ofstream archivo;
archivo.open("impresion.txt");

archivo<< "Este es el arreglo original"<<endl;
for (int i=0; i<n; i++){

  archivo <<"["<<a[i]<<"]"<<" ";

}
archivo <<endl;

archivo<< "Este es el arreglo ordenado"<<endl;
for (int i=0; i<n; i++){

  archivo <<"["<<b[i]<<"]"<<" ";

}

archivo.close();





}
